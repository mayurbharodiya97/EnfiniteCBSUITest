import React, { Fragment, useRef, useCallback, useState, useMemo, useEffect } from "react";
import Tabs from "@mui/material/Tabs";
import Tab from "@mui/material/Tab";
import { Box, Typography, Grid, ToggleButtonGroup, ToggleButton, TextField, InputAdornment, IconButton, Container, Button } from '@mui/material';
import ViewListIcon from "@mui/icons-material/ViewList";
import Search from "@mui/icons-material/Search";
import { styled, ThemeProvider, createTheme, unstable_createMuiStrictModeTheme } from '@mui/material/styles';
import PersonalDetails from "./PersonalDetails";
import StyledTab from "components/styledComponent/tab/tab";
import StyledTabs from "components/styledComponent/tabs/tabs";
import { blue, purple, teal, lightGreen } from "@mui/material/colors";
// import {Tabs} from '../../../../components/styledComponent/tabs';
// import {Tab} from '../../../../components/styledComponent/tab';

const newTheme = createTheme({
  components: {
    MuiToggleButtonGroup: {
      defaultProps: {
        orientation: "vertical",
        color: "primary",
        exclusive: true,
        fullWidth: true,
        size: "small"
      },
      styleOverrides: {
        root: {
          // width: "auto",
          // minWidth: "150px",
        },
        groupedVertical: ({ theme }) => ({
          border: `1px solid #aaa`,            
          // outlineStyle: "auto",
          // height: "70px",
          // outlineWidth: "1px",
          borderRadius: "10px",
          // backgroundColor: "teal"
        }),
        // grouped: {
        //   "& [not(:first-of-type)]": {
        //     borderTop: "1px solid red",
        //     borderBottomLeftRadius: "10px",
        //     borderBottomRightRadius: "10px",
        //     backgroundColor: "green"
        //   }
        // }
      }
    },
    MuiToggleButton: {
      defaultProps: {},
      styleOverrides: {
        root: ({ theme }) => ({
          // margin: "25px auto"
          // ouotline: "none",
          // border: `1px solid ${theme.palette.primary.main}`,
          // borderCollapse: "separate",
          // borderTop: "1px solid",
          // borderTop: `1px solid ${theme.palette.primary.main}`
        })
      }
    },
    MuiButtonBase: {
      styleOverrides: {
        root: {
          border: "1px solid red"
        }
      }
    }
  }
});

const CustomToggleButtonGroup = styled(ToggleButtonGroup)(({ theme }) => ({
  height: "60vh",
  overflow: "scroll",
  paddingRight: "2px",
  // backgroundColor: "#eee",
  "& .MuiToggleButtonGroup-grouped": {
      marginTop: "15px",
  },
  "& .MuiToggleButtonGroup-grouped:not(:first-of-type)": {
      marginTop: "15px",
      borderTop: "1px solid #aaa",
      borderTopLeftRadius: "10px",
      borderTopRightRadius: "10px",
  },
  "& .MuiToggleButtonGroup-grouped:not(:last-of-type)": {
      // marginTop: "-1px",
      // borderTop: "1px solid #aaa",
      borderBottomLeftRadius: "10px",
      borderBottomRightRadius: "10px",
  },
  "& .Mui-selected": {
      backgroundColor: "white",
      borderTop: `1px solid ${theme.palette.primary.main} !important`,
      border: `1px solid ${theme.palette.primary.main}`,
      boxShadow: `${theme.shadows[3]}`,
      // boxShadow: "0px 3px 3px -2px rgba(0,0,0,0.2), 0px 3px 4px 0px 0.14, 0px 1px 8px 0px rgba(0,0,0,0.12)",
      "& .toggle_icon_container": {
      backgroundColor: "#c6e1f6",
      },    
  },
  "& .toggle_icon_container": {
      backgroundColor: theme.palette.grey[200]
  },
  "& .toggle_text_container": {
      color: "black",
      "p": {
      fontWeight: "400"
      }
  }
}));

const CustomTabs = styled(StyledTabs)(({orientation, theme}) => ({
  border: "unset !important",
  boxShadow: "unset !important",
  background: "unset !important",
  "& .MuiTabs-flexContainer .MuiButtonBase-root": {
    textTransform: "capitalize",
  },
  "& .MuiTabs-root .MuiTabs-scroller": {
    borderBottom: "1px solid rgba(0,0,0,0.12)",
  },  
  "& .MuiTabs-scroller .MuiTabs-indicator": {
    backgroundColor: theme.palette.primary.dark,
    left: 0,
    display: orientation == "vertical" && "none",
  },
  // "&.MuiTabs-root.MuiTabs-vertical .MuiTabs-scroller .MuiTabs-indicator": {
  //   right: "auto !important",
  // },
  // "& .MuiButtonBase-root.Mui-selected": {
  //   color: "#1976d2"
  // },
  "& .MuiButtonBase-root.MuiTab-root:not(.Mui-selected):hover": {
    color: theme.palette.primary.dark,
  },
  "& .MuiTabs-flexContainerVertical .MuiButtonBase-root.MuiTab-root.MuiTab-textColorPrimary:hover": {
    border: `1px solid ${theme.palette.primary.main}`,
  },
  "& .MuiTabs-flexContainerVertical .MuiButtonBase-root.MuiTab-root.MuiTab-textColorPrimary": {
    border: `1px solid ${theme.palette.grey[600]}`,
    borderRadius: "10px",
    marginBottom: "10px"
  },
  "& .MuiTabs-flexContainerVertical .MuiButtonBase-root.MuiTab-root.MuiTab-textColorPrimary.Mui-selected": {
    border: `1px solid ${theme.palette.primary.dark}`,
    boxShadow: theme.shadows[2]
    // borderRadius: "10px",
    // marginBottom: "10px"
  },
  "& .MuiButtonBase-root.MuiTab-root .toggle_icon_container": {
    backgroundColor: theme.palette.grey[400],
  },
  "& .MuiButtonBase-root.MuiTab-root:hover .toggle_icon_container": {
    backgroundColor: "#c6e1f68f",
  },
  "& .MuiButtonBase-root.MuiTab-root.Mui-selected .toggle_icon_container": {
    backgroundColor: "#c6e1f6"
  }
}))

const StyledToggleButtonContainer = ({text1, text2}) => {
  return <div
    style={{
      display: "flex",
      alignItems: "center",
      justifyContent: "space-between",
      textTransform: "capitalize"
    }}
  >
    <div className="toggle_icon_container" 
      style={{
        // backgroundColor: "#ccc", 
        height:"40px", 
        width: "40px", 
        display: "flex", 
        alignItems:"center", 
        justifyContent: "center",
        borderRadius: "5px"
      }}
    >
      <ViewListIcon />
    </div>
    <div className="toggle_text_container"
      style={{
        // backgroundColor: "#eee",
        paddingLeft: "8px",
        textAlign: "left"
      }}
    >
      <h4 style={{ margin: "0px" }}>{text1}</h4>
      <p style={{ margin: "0px" }}>{text2}</p>
    </div>
  </div>
}

const StyledSearchField = styled(TextField)(({ theme }) => ({
  // width: "100%",
  "& .MuiInputBase-root": {
    color: "#888",
    padding: "5px",
    marginTop: "10px",
    marginBottom: "10px",
    backgroundColor: "#eee",
    border: "0",
    outline: "none"
  },
  "& .MuiInputBase-root .MuiInputBase-input": {
    paddingLeft: "10px"
  },
  "& .MuiInputBase-root.MuiOutlinedInput-root .MuiOutlinedInput-notchedOutline": {
    border: 0
  },
  "& .MuiInputBase-root.MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline": {
    border: "1.5px solid",
    borderColor: "#1976d2"
  },
  "& .MuiInputBase-root.MuiOutlinedInput-root": {
    paddingLeft: 0
  },
  "& .MuiInputAdornment-root": {
    paddingRight: "5px"
  }
}));


function a11yProps(index: number) {
  return {
    id: `simple-tab-${index}`,
    'aria-controls': `simple-tabpanel-${index}`,
  };
}

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}
function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {/* <Typography> */}
              {children}
          {/* </Typography> */}
        </Box>
      )}
    </div>
  );
}

const CustomTabLabel = ({tabLabel, subtext}) => {
  return (
    // <Box component={"div"}>
    //   <Typography variant="h6">{tabLabel}</Typography>
    //   <Typography variant="subtitle2">{subtext}</Typography>
    // </Box>

    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "space-between",
        textTransform: "capitalize",
      }}
    >
      <div className="toggle_icon_container" 
        style={{
          // backgroundColor: "#ccc", 
          height:"40px", 
          width: "40px", 
          display: "flex", 
          alignItems:"center", 
          justifyContent: "center",
          borderRadius: "5px"
        }}
      >
        <ViewListIcon />
      </div>
      <div className="toggle_text_container"
        style={{
          // backgroundColor: "#eee",
          paddingLeft: "8px",
          textAlign: "left"
        }}
      >
        <h4 style={{ margin: "0px" }}>{tabLabel}</h4>
        <p style={{ margin: "0px" }}>{subtext}</p>
      </div>
    </div>
  )
}

export const Ckyc = () => {
  const [inputSearchValue, setInputSearchValue] = React.useState("");
  const [tabValue, setTabValue] = React.useState(0);
  const [colTabValue, setColTabValue] = React.useState(0);
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };
  const handleColTabChange = (event: React.SyntheticEvent, newValue: number) => {
    // console.log({newValue})
    // if(newValue) {
      setColTabValue(newValue);
    // }
  };
  const handleInputSearchValue = (event) => {
    setInputSearchValue(event.target.value)
  }

  // useEffect(() => {
  //   console.log(colTabValue, typeof colTabValue,"...")
  //   console.log(tabValue, typeof tabValue, "... tab")
  // }, [colTabValue, tabValue])

  

  return (
    <div>
    {/* <ThemeProvider theme={{themeObj}}> */}
      <CustomTabs value={tabValue} onChange={handleTabChange} aria-label="ant example">
        <Tab label="Add New" />
        <Tab label="Retrieve" />
        <Tab label="Pending" />
        {/* <AntTab label="Tab 3" /> */}
      </CustomTabs>
      <TabPanel value={tabValue} index={0}>
        {/* Item One */}
          <Grid container columnGap={2}>
            <Grid item xs={12} sm >
              <Typography variant="h6" gutterBottom={true}>C-KYC Individual/Legal Entry</Typography>
              <StyledSearchField 
                value={inputSearchValue} 
                onChange={(e) => handleInputSearchValue(e)} 
                color="primary" placeholder="Search here..." fullWidth={true}
                InputProps={{
                  startAdornment: <InputAdornment position="end">
                    {/* <IconButton
                      aria-label="toggle password visibility"
                      // onClick={() => setOpenSearch(true)}
                    >
                      <SearchIcon /> */}
                      <Search />
                    {/* </IconButton> */}
                  </InputAdornment>                      
                }}
                // variant="standard" label="Search"
              />
              <Box sx={{ flexGrow: 1, display: 'flex', height: 450 }}>
                <CustomTabs variant="scrollable" scrollButtons="auto" orientation="vertical" value={colTabValue} onChange={handleColTabChange}>
                  <Tab sx={{padding: "10px"}} label={<CustomTabLabel tabLabel={"Personal Details"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"KYC"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"Declaration"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"Details of Related Person"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"Other Details"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"Other Address"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"NRI Details"} subtext={"Lorem ipsum dolor sit amet."} />} />
                  <Tab label={<CustomTabLabel tabLabel={"Attestation"} subtext={"Lorem ipsum dolor sit amet."} />} />
                </CustomTabs>
              </Box>
            </Grid>
            <Grid item xs={12} md={9}>
              <TabPanel value={colTabValue} index={0}>
                  {/* <Typography variant="h6">Personal Details</Typography> */}
                  <PersonalDetails />
              </TabPanel>
              <TabPanel value={colTabValue} index={1}>
                  <Typography variant="h6">KYC</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={2}>
                  <Typography variant="h6">Declaration</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={3}>
                <Typography variant="subtitle1">Details of Related Person</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={4}>
                <Typography variant="subtitle1">Other Details</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={5}>
                <Typography variant="subtitle1">Other Address</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={6}>
                <Typography variant="subtitle1">NRI Details</Typography>
              </TabPanel>
              <TabPanel value={colTabValue} index={7}>
                <Typography variant="subtitle1">Attestation</Typography>
              </TabPanel>
            </Grid>
          </Grid>          
      </TabPanel>
      <TabPanel value={tabValue} index={1}>
        {/* <Typography variant="h6">Retrieve</Typography> */}
        <Typography sx={{color: (theme) => theme.palette.grey[700]}} variant="h6" gutterBottom={true}>C-KYC Individual/Legal Entry (MST/707)</Typography>
        <Typography sx={{color: (theme) => theme.palette.grey[500]}} variant="subtitle1" gutterBottom={true}>Lorem ipsum dolor sit amet consectetur adipisicing elit.</Typography>

        <Grid sx={{backgroundColor: "#fff", padding: "10px", border:(theme) => `2px dashed ${theme.palette.grey[500]}`, borderRadius: "20px"}} my="20px" container xs direction={"column"}>
          <Grid item>
            <Typography sx={{color: (theme) => theme.palette.primary.main, paddingBottom: "20px"}} variant="h6" >Fetch Data</Typography>
          </Grid>
          <Grid item container direction={"column"}>
            <label htmlFor="customer_id" style={{color:"grey"}}>Customer ID</label>
            <StyledSearchField sx={{maxWidth: "300px"}} id={"customer_id"} placeholder="Customer ID" />
          </Grid>
          <Grid item py={2} sx={{textAlign: "right"}}>
            <Button sx={{backgroundColor: (theme) => theme.palette.primary.dark, textTransform: "capitalize"}} variant="contained">Retrieve</Button>
          </Grid>
        </Grid>
      </TabPanel>
      <TabPanel value={tabValue} index={2}>
        <Typography variant="subtitle1">Pending</Typography>
      </TabPanel>      
    {/* </ThemeProvider>   */}
    </div>
  );
};